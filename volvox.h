#ifndef VOLVOX_H_INCLUDED
#define VOLVOX_H_INCLUDED

// Версия движка
#define VOLVOX_VER 9

#include "render/vv_render.h"	// Подключает camera и world
#include "core/vv_model_inc.h"	// Подключает vv_model, vv_vox
#include "utils/vv_perlin.h"	// Шум Перлина

/*
	Заголовочный файл для подключения библиотеки volvox.
	Библиотека осуществляет отрисовку воксельного мира.
	Подключение (gcc):
	gcc -I<headers> -L<dir to volvox.a>-lvolvox
	Подключение в коде:
	#include "volvox.h"

    Описание движка:
    Состоит из четырех модулей:
    world - реализует работу с миром: ячейками, сегментами, воксельными буферами и отдельными вокселями.
    camera - реализует работу с камерой и фреймбуфером.
    render - реализует высокоуровневые функции отрисовки мира во фреймбуфер.
    model - реализует работу с моделями. На данный момент поддерживаются файлы .vox (MagicaVoxel)
    Для работы необходимо установить фреймбуфер, мир и камеру

    Все структуры и типы данных описаны в snake_case. Функции содержат приставку vv_*

    Определения:
    Фреймбуфер - выходное изображение, в которое движок осуществляет отрисовку.
    Описывается структурой framebuffer_s. Для удобства движок сам формирует фреймбуфер,
    с помощью функции vv_create_framebuffer

    Камера - параметры отображения мира (точка наблюдения, параметры сжатия и дальность отрисовки)
    Описывается структурой camera_s. Разработчик должен сам сформировать структуру и однократно установить укзаатель
    на нее в движок методом vv_set_camera. При необходимости смены камеры вызвать метод повторно и перерисовать мир.

    Структура мира/мир - структура памяти, описывающая матрицу из ячеек cell_s. В пространстве ячейки расходятся
    в стороны по осям X и Y.
    Мир может быть либо создан движком через метод vv_create_world, а также загружен/сформирован из кода и установлен
    в движок методом vv_set_world.
    Также структура описывает цвет фона для отрисовки (например, небо).

    Ячейка мира - структура cell_s, которая определяет наполнение мира по оси Z (вверх).
    Ячейка состоит из CELL_SEGMENT_COUNT сегментов.

    Сегмент - определенное количество вокселей одного цвета, которые выложены вверх (+ по оси Z)
    Описывается структурой segment_s.

    Воксель - минимальная единица мира. Рисуется как квадрат определенного цвета. Располагается в сегменте.
    Цвет вокселя определяется структурой color_u.

    Воксельный буфер - массив из 0..VOXEL_BUFFER_ELEM_COUNT последовательно идущих вокселей. В движке реализован для механизма отрисовки,
    а также удобства работы с миром.

    Параметры рендеринга - структура render_param_s, определяет настройки отрисовки. Задается однократно при необходимости.

    Порядок работы с движком:
    1. Создать структуру мира и установить ее в движок. Пример:
    color_u back_color; // Цвет фона
    back_color.r = 60;
    back_color.g = 120;
    back_color.b = 215;
    back_color.a = 0xff;

    world_s *world = vv_create_world( 1024, 1024, back_color );
    vv_set_world( world );

    2. Сформировать фреймбуфер. Пример:
    framebuffer_s *framebuffer = vv_create_framebuffer( SCREEN_SIZE_X, SCREEN_SIZE_Y );

    3. Сформировать структуру камеры и установить ее. Пример:
    camera_s camera = {
        .x = 512.0,
        .y = 512.0,
        .height = 30.0,
        .angle = 1.5 * M_PI,
        .horizon = 80,
        .distance = 256,
        .v_scale = 80	// screen.h / 2
    };
    vv_set_camera( &camera );

    4. Задание настроек отрисовки (при необходимости)
	render_param_s rp;
	// Установка параметров
	vv_set_render_param( &rp );

    5. Отрисовка в цикле:
    vv_clear_framebuffer( );    // Очистка фреймбуфера цветом фона. Он задан в структуре мира. В примере - back_color
    vv_render_base( );          // Отрисовка во фреймбуфер.

    6. Далее отображение фреймбуфера на экран
    framebuffer->data  - это указатель на массив пикселей RGBA размерами framebuffer->width * framebuffer->height
*/

#endif // VOLVOX_H_INCLUDED
